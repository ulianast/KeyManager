#!/usr/bin/env node
'use strict';

/**
 * Module dependencies.
 */

import app from '../app';
import http from 'http';
import config from '../config';
import {getLogger} from '../server/utils/logger';
import models from '../server/dao/models';

const log = getLogger(module);

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || config.get('port'));
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

models.sequelize.sync()
  .then(() =>
    models.sequelize.authenticate()
      .then(() => {
        server.listen(port);
        server.on('error', onError);
        server.on('listening', onListening);
        log.info('Express server listenning on ' + port + ' port');
      })
      .catch(err => log.error('Error while launching DB: ' + err))
  )
  .catch(err => log.error('Error while launching DB: ' + err));



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      log.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      log.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  //log.info('Listening on ' + bind);
}
